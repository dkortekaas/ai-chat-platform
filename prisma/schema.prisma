// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  chatbotSettings ChatbotSettings[]
  
  @@map("users")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id              String       @id @default(cuid())
  name            String
  originalName    String
  type            DocumentType
  mimeType        String?
  fileSize        Int?
  filePath        String?
  url             String?
  contentText     String       @db.Text
  metadata        Json?
  status          DocumentStatus @default(PROCESSING)
  errorMessage    String?      @db.Text
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  chunks          DocumentChunk[]
  conversationSources ConversationSource[]
  
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("documents")
}

enum DocumentType {
  PDF
  DOCX
  TXT
  URL
  IMAGE
}

enum DocumentStatus {
  PROCESSING
  COMPLETED
  FAILED
}

model DocumentChunk {
  id              String   @id @default(cuid())
  documentId      String
  chunkIndex      Int
  content         String   @db.Text
  embedding       Unsupported("vector(1536)")?
  tokenCount      Int?
  metadata        Json?
  
  createdAt       DateTime @default(now())
  
  document        Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([documentId])
  @@map("document_chunks")
}

model ChatbotSettings {
  id                    String   @id @default(cuid())
  userId                String
  name                  String   @default("AI Assistent")
  welcomeMessage        String   @default("Hallo! Hoe kan ik je helpen?")
  placeholderText       String   @default("Stel een vraag...")
  primaryColor          String   @default("#3B82F6")
  secondaryColor        String   @default("#1E40AF")
  
  tone                  String   @default("professional")
  language              String   @default("nl")
  maxResponseLength     Int      @default(500)
  temperature           Float    @default(0.7)
  fallbackMessage       String   @default("Sorry, ik kan deze vraag niet beantwoorden op basis van de beschikbare informatie.")
  
  position              String   @default("bottom-right")
  showBranding          Boolean  @default(true)
  isActive              Boolean  @default(true)
  
  apiKey                String   @unique @default(cuid())
  allowedDomains        String[]
  rateLimit             Int      @default(10)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chatbot_settings")
}

model Conversation {
  id              String   @id @default(cuid())
  sessionId       String
  ipAddress       String?
  userAgent       String?  @db.Text
  referrer        String?
  
  question        String   @db.Text
  answer          String   @db.Text
  responseTime    Int?
  
  rating          Int?     @db.SmallInt
  ratingNotes     String?  @db.Text
  ratedAt         DateTime?
  ratedBy         String?
  
  model           String?
  tokensUsed      Int?
  confidence      Float?
  
  createdAt       DateTime @default(now())
  
  sources         ConversationSource[]
  
  @@index([sessionId])
  @@index([rating])
  @@index([createdAt])
  @@map("conversations")
}

model ConversationSource {
  id              String   @id @default(cuid())
  conversationId  String
  documentId      String
  chunkContent    String   @db.Text
  relevanceScore  Float?
  
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  document        Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@map("conversation_sources")
}

model SystemLog {
  id          String   @id @default(cuid())
  level       LogLevel
  message     String   @db.Text
  context     Json?
  userId      String?
  createdAt   DateTime @default(now())
  
  @@index([level])
  @@index([createdAt])
  @@map("system_logs")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}